import requests
import time
import sqlite3
from datetime import datetime, timedelta
import logging
import threading

class NightModeBot:
    def __init__(self, token):
        self.token = token
        self.base_url = f"https://api.telegram.org/bot{token}/"
        self.setup_database()
        self.setup_logging()
        self.user_states = {}
        self.user_current_chat = {}
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –ø—Ä–æ–≤–µ—Ä–∫—É –≤—Ä–µ–º–µ–Ω–∏
        self.background_thread = threading.Thread(target=self.background_time_check, daemon=True)
        self.background_thread.start()
        
        print("ü§ñ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –∑–∞–ø—É—â–µ–Ω!")
        print("‚è∞ –§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω–∞")
        print("üíæ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ —É–¥–∞–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞")
        print("üì± –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram")

    def setup_database(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–ª–æ–Ω–æ–∫"""
        self.conn = sqlite3.connect('night_bot.db', check_same_thread=False)
        self.cursor = self.conn.cursor()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –Ω–∞—Å—Ç—Ä–æ–µ–∫ —á–∞—Ç–æ–≤
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS chat_settings (
                chat_id INTEGER PRIMARY KEY,
                chat_title TEXT,
                night_mode_enabled INTEGER DEFAULT 0,
                start_time TEXT DEFAULT '23:00',
                end_time TEXT DEFAULT '05:00',
                welcome_message TEXT DEFAULT 'üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —É–¥–∞–ª—è—Ç—å—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞.',
                is_active INTEGER DEFAULT 1,
                added_date TEXT,
                last_notification_date TEXT,
                is_night_mode_active INTEGER DEFAULT 0
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–æ–ª–æ–Ω–∫–∏ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
        try:
            self.cursor.execute("ALTER TABLE chat_settings ADD COLUMN last_notification_date TEXT")
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            
        try:
            self.cursor.execute("ALTER TABLE chat_settings ADD COLUMN is_night_mode_active INTEGER DEFAULT 0")
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –°–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS saved_messages (
                id INTEGER PRIMARY KEY AUTOINCREMENT,
                chat_id INTEGER,
                message_id INTEGER,
                user_id INTEGER,
                message_text TEXT,
                message_type TEXT DEFAULT 'text',
                saved_date TEXT,
                night_mode_session TEXT,
                FOREIGN KEY (chat_id) REFERENCES chat_settings (chat_id)
            )
        ''')
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∫–æ–ª–æ–Ω–∫—É message_type –µ—Å–ª–∏ –µ—ë –Ω–µ—Ç
        try:
            self.cursor.execute("ALTER TABLE saved_messages ADD COLUMN message_type TEXT DEFAULT 'text'")
        except sqlite3.OperationalError:
            pass  # –ö–æ–ª–æ–Ω–∫–∞ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
        
        # –°–µ—Å—Å–∏–∏ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        self.cursor.execute('''
            CREATE TABLE IF NOT EXISTS night_sessions (
                session_id TEXT PRIMARY KEY,
                chat_id INTEGER,
                start_time TEXT,
                end_time TEXT,
                message_count INTEGER DEFAULT 0,
                is_completed INTEGER DEFAULT 0
            )
        ''')
        
        self.conn.commit()

    def setup_logging(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
        logging.basicConfig(
            level=logging.INFO,
            format='%(asctime)s - %(levelname)s - %(message)s',
            handlers=[
                logging.FileHandler('night_bot.log'),
                logging.StreamHandler()
            ]
        )
        self.logger = logging.getLogger()

    def send_message(self, chat_id, text, reply_markup=None):
        """–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        url = self.base_url + "sendMessage"
        params = {
            "chat_id": chat_id,
            "text": text,
            "parse_mode": "HTML"
        }
        if reply_markup:
            params["reply_markup"] = reply_markup
            
        try:
            response = requests.post(url, json=params, timeout=10)
            if response.json().get("ok"):
                self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –≤ {chat_id}")
                return True
            else:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –≤ {chat_id}: {response.json()}")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
            return False

    def delete_message(self, chat_id, message_id):
        """–£–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        url = self.base_url + "deleteMessage"
        params = {
            "chat_id": chat_id,
            "message_id": message_id
        }
        
        try:
            response = requests.post(url, json=params, timeout=10)
            if response.json().get("ok"):
                self.logger.info(f"üóëÔ∏è –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} —É–¥–∞–ª–µ–Ω–æ –≤ {chat_id}")
                return True
            else:
                error = response.json().get('description', 'Unknown error')
                self.logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ {chat_id}: {error}")
                return False
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è: {e}")
            return False

    def create_keyboard(self, buttons, rows=1):
        """–°–æ–∑–¥–∞—Ç—å –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        keyboard = []
        row = []
        
        for i, button in enumerate(buttons):
            row.append({"text": button})
            if (i + 1) % rows == 0:
                keyboard.append(row)
                row = []
        
        if row:
            keyboard.append(row)
            
        return {"keyboard": keyboard, "resize_keyboard": True}

    def create_inline_keyboard(self, buttons):
        """–°–æ–∑–¥–∞—Ç—å –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É"""
        keyboard = []
        
        for button_row in buttons:
            row = []
            for button_text, callback_data in button_row:
                row.append({"text": button_text, "callback_data": callback_data})
            keyboard.append(row)
            
        return {"inline_keyboard": keyboard}

    def get_message_type(self, message):
        """–û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è"""
        if "text" in message:
            return "text"
        elif "sticker" in message:
            return "sticker"
        elif "photo" in message:
            return "photo"
        elif "video" in message:
            return "video"
        elif "document" in message:
            return "document"
        elif "audio" in message:
            return "audio"
        elif "voice" in message:
            return "voice"
        elif "video_note" in message:
            return "video_note"
        elif "animation" in message:
            return "animation"
        elif "location" in message:
            return "location"
        elif "contact" in message:
            return "contact"
        else:
            return "unknown"

    def get_message_content(self, message):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        message_type = self.get_message_type(message)
        
        if message_type == "text":
            return message.get("text", "")
        elif message_type == "sticker":
            emoji = message["sticker"].get("emoji", "")
            return f"–°—Ç–∏–∫–µ—Ä {emoji}"
        elif message_type == "photo":
            caption = message.get("caption", "")
            return f"–§–æ—Ç–æ {caption}".strip()
        elif message_type == "video":
            caption = message.get("caption", "")
            return f"–í–∏–¥–µ–æ {caption}".strip()
        elif message_type == "document":
            caption = message.get("caption", "")
            file_name = message["document"].get("file_name", "")
            return f"–î–æ–∫—É–º–µ–Ω—Ç {file_name} {caption}".strip()
        elif message_type == "audio":
            caption = message.get("caption", "")
            title = message["audio"].get("title", "")
            return f"–ê—É–¥–∏–æ {title} {caption}".strip()
        elif message_type == "voice":
            return "–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"
        elif message_type == "video_note":
            return "–ö—Ä—É–∂–æ—á–µ–∫ –≤–∏–¥–µ–æ"
        elif message_type == "animation":
            caption = message.get("caption", "")
            return f"GIF {caption}".strip()
        elif message_type == "location":
            lat = message["location"]["latitude"]
            lon = message["location"]["longitude"]
            return f"üìç –õ–æ–∫–∞—Ü–∏—è ({lat}, {lon})"
        elif message_type == "contact":
            contact = message["contact"]
            name = f"{contact.get('first_name', '')} {contact.get('last_name', '')}".strip()
            phone = contact.get("phone_number", "")
            return f"üë§ –ö–æ–Ω—Ç–∞–∫—Ç {name} {phone}".strip()
        else:
            return "–ú–µ–¥–∏–∞-—Å–æ–æ–±—â–µ–Ω–∏–µ"

    def background_time_check(self):
        """–§–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ –¥–ª—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.logger.info("‚è∞ –ó–∞–ø—É—â–µ–Ω–∞ —Ñ–æ–Ω–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏")
        
        while True:
            try:
                current_time = datetime.now().strftime("%H:%M")
                current_date = datetime.now().strftime("%Y-%m-%d")
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —á–∞—Ç—ã —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º –Ω–æ—á–Ω—ã–º —Ä–µ–∂–∏–º–æ–º
                self.cursor.execute('''
                    SELECT chat_id, start_time, end_time, welcome_message, last_notification_date, is_night_mode_active 
                    FROM chat_settings 
                    WHERE night_mode_enabled = 1 AND is_active = 1
                ''')
                chats = self.cursor.fetchall()
                
                for chat_id, start_time, end_time, welcome_message, last_notification, is_night_active in chats:
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    if current_time == start_time and not is_night_active:
                        # –ù–∞—á–∞–ª–æ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                        session_id = f"{chat_id}_{datetime.now().strftime('%Y%m%d_%H%M')}"
                        
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é
                        self.cursor.execute('''
                            INSERT OR REPLACE INTO night_sessions 
                            (session_id, chat_id, start_time, end_time) 
                            VALUES (?, ?, ?, ?)
                        ''', (session_id, chat_id, datetime.now().isoformat(), end_time))
                        
                        # –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
                        self.cursor.execute(
                            'UPDATE chat_settings SET is_night_mode_active = 1, last_notification_date = ? WHERE chat_id = ?',
                            (current_date, chat_id)
                        )
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ
                        self.send_message(chat_id, welcome_message)
                        self.logger.info(f"üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –Ω–∞—á–∞–ª—Å—è –≤ —á–∞—Ç–µ {chat_id}, —Å–µ—Å—Å–∏—è: {session_id}")
                        
                        self.conn.commit()
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—É–ø–∏–ª–æ –ª–∏ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                    elif current_time == end_time and is_night_active:
                        # –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ - —É–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.end_night_mode(chat_id)
                        
                time.sleep(60)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
                
            except Exception as e:
                self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ–Ω–æ–≤–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
                time.sleep(60)

    def end_night_mode(self, chat_id):
        """–ó–∞–≤–µ—Ä—à–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∏ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é
            self.cursor.execute('''
                SELECT session_id FROM night_sessions 
                WHERE chat_id = ? AND is_completed = 0 
                ORDER BY start_time DESC LIMIT 1
            ''', (chat_id,))
            session = self.cursor.fetchone()
            
            if session:
                session_id = session[0]
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è —ç—Ç–æ–π —Å–µ—Å—Å–∏–∏
                self.cursor.execute('''
                    SELECT message_id FROM saved_messages 
                    WHERE chat_id = ? AND night_mode_session = ?
                ''', (chat_id, session_id))
                
                messages = self.cursor.fetchall()
                deleted_count = 0
                
                # –£–¥–∞–ª—è–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                for message_row in messages:
                    message_id = message_row[0]
                    if self.delete_message(chat_id, message_id):
                        deleted_count += 1
                    time.sleep(0.1)  # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É —É–¥–∞–ª–µ–Ω–∏—è–º–∏
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç—á–µ—Ç
                settings = self.get_chat_settings(chat_id)
                if settings:
                    start_time = settings[3] if len(settings) > 3 else "23:00"
                    end_time = settings[4] if len(settings) > 4 else "05:00"
                    
                    report_text = f"""
‚òÄÔ∏è <b>–ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω</b>

–£–¥–∞–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {deleted_count}
–ü–µ—Ä–∏–æ–¥: —Å {start_time} –¥–æ {end_time}

üí¨ –°–æ–æ–±—â–µ–Ω–∏—è –∑–∞ –Ω–æ—á–Ω–æ–π –ø–µ—Ä–∏–æ–¥ –æ—á–∏—â–µ–Ω—ã.
"""
                    self.send_message(chat_id, report_text)
                
                # –ü–æ–º–µ—á–∞–µ–º —Å–µ—Å—Å–∏—é –∫–∞–∫ –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—É—é
                self.cursor.execute(
                    'UPDATE night_sessions SET is_completed = 1, message_count = ? WHERE session_id = ?',
                    (deleted_count, session_id)
                )
                
                # –î–µ–∞–∫—Ç–∏–≤–∏—Ä—É–µ–º –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
                self.cursor.execute(
                    'UPDATE chat_settings SET is_night_mode_active = 0 WHERE chat_id = ?',
                    (chat_id,)
                )
                
                self.conn.commit()
                self.logger.info(f"‚òÄÔ∏è –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∑–∞–≤–µ—Ä—à–µ–Ω –≤ —á–∞—Ç–µ {chat_id}, —É–¥–∞–ª–µ–Ω–æ {deleted_count} —Å–æ–æ–±—â–µ–Ω–∏–π")
                
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞: {e}")

    def save_message(self, chat_id, message_id, user_id, message_text, message_type, session_id):
        """–°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è"""
        try:
            self.cursor.execute('''
                INSERT INTO saved_messages 
                (chat_id, message_id, user_id, message_text, message_type, saved_date, night_mode_session) 
                VALUES (?, ?, ?, ?, ?, ?, ?)
            ''', (chat_id, message_id, user_id, message_text[:500], message_type, datetime.now().isoformat(), session_id))
            self.conn.commit()
            self.logger.info(f"üíæ –°–æ–æ–±—â–µ–Ω–∏–µ {message_id} ({message_type}) —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è –≤ —Å–µ—Å—Å–∏–∏ {session_id}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def get_current_session(self, chat_id):
        """–ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â—É—é –∞–∫—Ç–∏–≤–Ω—É—é —Å–µ—Å—Å–∏—é –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞"""
        self.cursor.execute('''
            SELECT session_id FROM night_sessions 
            WHERE chat_id = ? AND is_completed = 0 
            ORDER BY start_time DESC LIMIT 1
        ''', (chat_id,))
        result = self.cursor.fetchone()
        return result[0] if result else None

    def handle_message(self, message_obj, user_id, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π"""
        message_type = self.get_message_type(message_obj)
        message_content = self.get_message_content(message_obj)
        
        self.logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {user_id} –≤ {chat_id}: [{message_type}] {message_content}")
        
        # –î–ª—è –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π —Å –±–æ—Ç–æ–º - –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã
        if chat_id > 0:
            if message_type == "text":
                return self.handle_private_message(message_content, user_id, chat_id)
            else:
                # –í –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –Ω–µ-—Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                return True
        else:
            return self.handle_group_message(message_content, user_id, chat_id, message_obj, message_type)

    def handle_private_message(self, message_text, user_id, chat_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ –ª–∏—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
        
        # –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π –≤ –ø–µ—Ä–≤—É—é –æ—á–µ—Ä–µ–¥—å
        if user_id in self.user_states:
            state = self.user_states[user_id]
            
            if state.startswith("waiting_time_"):
                target_chat_id = self.user_current_chat.get(user_id)
                if target_chat_id:
                    if self.is_valid_time(message_text):
                        if "start" in state:
                            self.update_start_time(target_chat_id, message_text)
                            self.send_message(chat_id, f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {message_text}")
                        else:
                            self.update_end_time(target_chat_id, message_text)
                            self.send_message(chat_id, f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ: {message_text}")
                        del self.user_states[user_id]
                        self.show_chat_settings(chat_id, target_chat_id, user_id)
                    else:
                        self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –≤—Ä–µ–º–µ–Ω–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ß–ß:MM (–Ω–∞–ø—Ä–∏–º–µ—Ä, 23:00)")
                return True
                
            elif state == "waiting_message":
                target_chat_id = self.user_current_chat.get(user_id)
                if target_chat_id:
                    self.update_welcome_message(target_chat_id, message_text)
                    del self.user_states[user_id]
                    self.send_message(chat_id, "‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ!")
                    self.show_chat_settings(chat_id, target_chat_id, user_id)
                return True
                
            elif state == "waiting_chat_id":
                try:
                    target_chat_id = int(message_text)
                    # –°–æ–∑–¥–∞–µ–º –∏–ª–∏ –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–ø–∏—Å—å
                    self.cursor.execute('''
                        INSERT OR REPLACE INTO chat_settings 
                        (chat_id, is_active, added_date) 
                        VALUES (?, 1, ?)
                    ''', (target_chat_id, datetime.now().isoformat()))
                    self.conn.commit()
                    del self.user_states[user_id]
                    self.user_current_chat[user_id] = target_chat_id
                    self.send_message(chat_id, f"‚úÖ –ß–∞—Ç {target_chat_id} –¥–æ–±–∞–≤–ª–µ–Ω!")
                    self.show_chat_settings(chat_id, target_chat_id, user_id)
                except ValueError:
                    self.send_message(chat_id, "‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç ID. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ–≤–æ–π ID —á–∞—Ç–∞.")
                return True

        # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥
        if message_text == "/start":
            self.show_main_menu(chat_id)
            return True
            
        elif message_text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
            self.show_main_menu(chat_id)
            return True
            
        elif message_text == "üìã –ú–æ–∏ —á–∞—Ç—ã":
            self.show_my_chats(user_id, chat_id)
            return True
            
        elif message_text == "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç":
            self.user_states[user_id] = "waiting_chat_id"
            self.send_message(chat_id, 
                "üìù –í–≤–µ–¥–∏—Ç–µ ID —á–∞—Ç–∞ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è:\n\n"
                "–ß—Ç–æ–±—ã –ø–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞, –¥–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∏ –Ω–∞–ø–∏—à–∏—Ç–µ –≤ –Ω–µ–π –∫–æ–º–∞–Ω–¥—É /id")
            return True
            
        elif message_text == "‚ùì –ü–æ–º–æ—â—å":
            self.show_help(chat_id)
            return True
            
        else:
            self.show_main_menu(chat_id)
            return True

    def handle_callback(self, callback_data, user_id, chat_id, message_id):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫"""
        print(f"üîß Callback: {callback_data} –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        if callback_data == "main_menu":
            self.show_main_menu(chat_id)
            
        elif callback_data.startswith("select_chat_"):
            chat_id_str = callback_data[12:]
            try:
                target_chat_id = int(chat_id_str)
                self.user_current_chat[user_id] = target_chat_id
                self.show_chat_settings(chat_id, target_chat_id, user_id)
            except ValueError:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –≤—ã–±–æ—Ä–∞ —á–∞—Ç–∞")
                
        elif callback_data.startswith("toggle_mode_"):
            chat_id_str = callback_data[12:]
            try:
                target_chat_id = int(chat_id_str)
                settings = self.get_chat_settings(target_chat_id)
                if settings:
                    if settings[2]:  # –ï—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                        self.disable_night_mode(target_chat_id)
                        self.send_message(chat_id, "‚úÖ –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω")
                    else:
                        self.enable_night_mode(target_chat_id)
                        self.send_message(chat_id, "‚úÖ –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω")
                    self.show_chat_settings(chat_id, target_chat_id, user_id)
            except ValueError:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Ä–µ–∂–∏–º–∞")
                
        elif callback_data.startswith("edit_start_"):
            chat_id_str = callback_data[11:]
            try:
                target_chat_id = int(chat_id_str)
                self.user_current_chat[user_id] = target_chat_id
                self.user_states[user_id] = "waiting_time_start"
                self.send_message(chat_id, 
                    "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:\n\n"
                    "–§–æ—Ä–º–∞—Ç: –ß–ß:MM (24-—á–∞—Å–æ–≤–æ–π)\n"
                    "–ü—Ä–∏–º–µ—Ä: 23:00 –∏–ª–∏ 22:30\n\n"
                    "–í —ç—Ç–æ –≤—Ä–µ–º—è –±–æ—Ç –æ—Ç–ø—Ä–∞–≤–∏—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –∏ –Ω–∞—á–Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except ValueError:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
                
        elif callback_data.startswith("edit_end_"):
            chat_id_str = callback_data[9:]
            try:
                target_chat_id = int(chat_id_str)
                self.user_current_chat[user_id] = target_chat_id
                self.user_states[user_id] = "waiting_time_end"
                self.send_message(chat_id, 
                    "‚è∞ –í–≤–µ–¥–∏—Ç–µ –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞:\n\n"
                    "–§–æ—Ä–º–∞—Ç: –ß–ß:MM (24-—á–∞—Å–æ–≤–æ–π)\n"
                    "–ü—Ä–∏–º–µ—Ä: 05:00 –∏–ª–∏ 06:30\n\n"
                    "–í —ç—Ç–æ –≤—Ä–µ–º—è –±–æ—Ç —É–¥–∞–ª–∏—Ç –≤—Å–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è.")
            except ValueError:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤—Ä–µ–º–µ–Ω–∏")
                
        elif callback_data.startswith("edit_message_"):
            chat_id_str = callback_data[13:]
            try:
                target_chat_id = int(chat_id_str)
                self.user_current_chat[user_id] = target_chat_id
                self.user_states[user_id] = "waiting_message"
                self.send_message(chat_id, 
                    "üìù –í–≤–µ–¥–∏—Ç–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ:\n\n"
                    "–≠—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª—è—Ç—å—Å—è –ø—Ä–∏ –Ω–∞—á–∞–ª–µ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞.\n"
                    "–ü—Ä–∏–º–µ—Ä: üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω! –°–æ–æ–±—â–µ–Ω–∏—è –±—É–¥—É—Ç —Å–æ—Ö—Ä–∞–Ω—è—Ç—å—Å—è –∏ —É–¥–∞–ª—è—Ç—å—Å—è –≤ 5:00.")
            except ValueError:
                self.send_message(chat_id, "‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è")

        # –û—Ç–≤–µ—Ç –Ω–∞ callback (—É–±–∏—Ä–∞–µ—Ç —á–∞—Å–∏–∫–∏)
        try:
            requests.post(f"{self.base_url}answerCallbackQuery", 
                         json={"callback_query_id": callback_data})
        except:
            pass

    def handle_group_message(self, message_text, user_id, chat_id, message_obj, message_type):
        """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –≤ –≥—Ä—É–ø–ø–µ"""
        if message_type == "text":
            if message_text == "/id":
                self.send_message(chat_id, f"üÜî ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞: <code>{chat_id}</code>\n\n–°–∫–æ–ø–∏—Ä—É–π—Ç–µ —ç—Ç–æ—Ç ID –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –ª–∏—á–Ω–æ–º —á–∞—Ç–µ —Å –±–æ—Ç–æ–º.")
                return True
                
            elif message_text == "/start":
                self.show_group_help(chat_id)
                return True
                
            elif message_text == "/status":
                self.show_group_status(chat_id)
                return True
                
            elif message_text == "/test_night":
                # –¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
                settings = self.get_chat_settings(chat_id)
                if settings and len(settings) > 2 and settings[2]:
                    current_session = self.get_current_session(chat_id)
                    if current_session:
                        # –°—á–∏—Ç–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
                        self.cursor.execute('SELECT COUNT(*) FROM saved_messages WHERE chat_id = ? AND night_mode_session = ?', 
                                          (chat_id, current_session))
                        saved_count = self.cursor.fetchone()[0]
                        
                        end_time = settings[4] if len(settings) > 4 else "05:00"
                        self.send_message(chat_id, 
                            f"üî¥ –¢–ï–°–¢: –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –ê–ö–¢–ò–í–ï–ù\n"
                            f"üíæ –°–æ–æ–±—â–µ–Ω–∏–π —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count}\n"
                            f"‚è∞ –£–¥–∞–ª–µ–Ω–∏–µ –≤: {end_time}")
                    else:
                        self.send_message(chat_id, "üü¢ –¢–ï–°–¢: –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –ù–ï–ê–ö–¢–ò–í–ï–ù (–æ–∂–∏–¥–∞–Ω–∏–µ –Ω–∞—á–∞–ª–∞)")
                else:
                    self.send_message(chat_id, "üü¢ –¢–ï–°–¢: –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –í–´–ö–õ–Æ–ß–ï–ù")
                return True
                
            elif message_text == "/force_cleanup" and self.is_user_admin(chat_id, user_id):
                # –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
                self.end_night_mode(chat_id)
                return True

        # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–µ–Ω
        settings = self.get_chat_settings(chat_id)
        if settings and len(settings) > 9 and settings[9]:  # is_night_mode_active
            current_session = self.get_current_session(chat_id)
            if current_session:
                self.save_message(chat_id, message_obj["message_id"], user_id, message_text, message_type, current_session)
            
        return True

    def is_user_admin(self, chat_id, user_id):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º"""
        url = self.base_url + "getChatAdministrators"
        params = {"chat_id": chat_id}
        
        try:
            response = requests.post(url, json=params, timeout=10)
            data = response.json()
            if data.get("ok"):
                admins = [admin["user"]["id"] for admin in data["result"]]
                return user_id in admins
        except:
            pass
        return False

    def show_main_menu(self, chat_id):
        """–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"""
        text = """
ü§ñ <b>–ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞</b>

<b>–†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã:</b>
‚Ä¢ üíæ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
‚Ä¢ üóëÔ∏è –í—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è —É–¥–∞–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞
‚Ä¢ üìä –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç—á–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        buttons = [
            "üìã –ú–æ–∏ —á–∞—Ç—ã",
            "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞t", 
            "‚ùì –ü–æ–º–æ—â—å"
        ]
        
        keyboard = self.create_keyboard(buttons, 2)
        self.send_message(chat_id, text, keyboard)

    def show_my_chats(self, user_id, chat_id):
        """–ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ —á–∞—Ç–æ–≤ —Å –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∞–º–∏"""
        self.cursor.execute('SELECT chat_id, chat_title, night_mode_enabled, start_time, end_time FROM chat_settings WHERE is_active = 1')
        chats = self.cursor.fetchall()
        
        if not chats:
            text = """
üìã <b>–ú–æ–∏ —á–∞—Ç—ã</b>

‚ùå –£ –≤–∞—Å –Ω–µ—Ç –Ω–∞—Å—Ç—Ä–æ–µ–Ω–Ω—ã—Ö —á–∞—Ç–æ–≤.

–ù–∞–∂–º–∏—Ç–µ "‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç" —á—Ç–æ–±—ã –¥–æ–±–∞–≤–∏—Ç—å –ø–µ—Ä–≤—ã–π —á–∞—Ç.
"""
            keyboard = self.create_keyboard(["‚ûï –î–æ–±–∞–≤–∏—Ç—å —á–∞—Ç", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"])
            self.send_message(chat_id, text, keyboard)
        else:
            text = "üìã <b>–ú–æ–∏ —á–∞—Ç—ã</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ —á–∞—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:\n"
            
            # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —á–∞—Ç–∞
            keyboard_buttons = []
            for chat_id_db, chat_title, enabled, start_time, end_time in chats:
                status = "üü¢" if enabled else "üî¥"
                chat_name = chat_title or f"–ß–∞—Ç {chat_id_db}"
                button_text = f"{status} {chat_name}"
                keyboard_buttons.append([(button_text, f"select_chat_{chat_id_db}")])
            
            keyboard_buttons.append([("üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é", "main_menu")])
            
            inline_keyboard = self.create_inline_keyboard(keyboard_buttons)
            self.send_message(chat_id, text, inline_keyboard)

    def show_chat_settings(self, chat_id, target_chat_id, user_id):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —á–∞—Ç–∞"""
        settings = self.get_chat_settings(target_chat_id)
        
        if not settings:
            self.send_message(chat_id, "‚ùå –ß–∞—Ç –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
            
        # –ë–µ–∑–æ–ø–∞—Å–Ω–æ–µ –ø–æ–ª—É—á–µ–Ω–∏–µ –∑–Ω–∞—á–µ–Ω–∏–π —Å –ø—Ä–æ–≤–µ—Ä–∫–æ–π –¥–ª–∏–Ω—ã –∫–æ—Ä—Ç–µ–∂–∞
        night_mode_enabled = settings[2] if len(settings) > 2 else 0
        start_time = settings[3] if len(settings) > 3 else "23:00"
        end_time = settings[4] if len(settings) > 4 else "05:00"
        welcome_msg = settings[5] if len(settings) > 5 else "üåô –ù–æ—á–Ω–æ–π —Ä–µ–∂–∏–º –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω!"
        is_night_mode_active = settings[9] if len(settings) > 9 else 0
        
        status = "üü¢ –í–ö–õ–Æ–ß–ï–ù" if night_mode_enabled else "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å
        current_status = "üî¥ –ê–ö–¢–ò–í–ï–ù (—Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)" if is_night_mode_active else "üü¢ –û–ñ–ò–î–ê–ù–ò–ï"
        
        text = f"""
‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞</b>

üÜî ID: <code>{target_chat_id}</code>
üåô –†–µ–∂–∏–º: {status}
‚è∞ –í—Ä–µ–º—è: {start_time} - {end_time}
üìä –°—Ç–∞—Ç—É—Å: {current_status}
üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {welcome_msg}

–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:
"""
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–∫–∏ –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        toggle_text = "üî¥ –í—ã–∫–ª—é—á–∏—Ç—å" if night_mode_enabled else "üü¢ –í–∫–ª—é—á–∏—Ç—å"
        keyboard_buttons = [
            [(toggle_text, f"toggle_mode_{target_chat_id}")],
            [("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞", f"edit_start_{target_chat_id}")],
            [("‚è∞ –ò–∑–º–µ–Ω–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è", f"edit_end_{target_chat_id}")],
            [("üìù –ò–∑–º–µ–Ω–∏—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ", f"edit_message_{target_chat_id}")],
            [("üîô –ö —Å–ø–∏—Å–∫—É —á–∞—Ç–æ–≤", "main_menu")]
        ]
        
        inline_keyboard = self.create_inline_keyboard(keyboard_buttons)
        self.send_message(chat_id, text, inline_keyboard)

    def show_help(self, chat_id):
        """–ü–æ–º–æ—â—å"""
        text = """
‚ùì <b>–ü–æ–º–æ—â—å –ø–æ –±–æ—Ç—É (—Ä–µ–∂–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è)</b>

<b>–ö–∞–∫ —Ä–∞–±–æ—Ç–∞–µ—Ç:</b>
‚Ä¢ –°–æ–æ–±—â–µ–Ω–∏—è –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞ –°–û–•–†–ê–ù–Ø–Æ–¢–°–Ø
‚Ä¢ –í –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞ –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –£–î–ê–õ–Ø–Æ–¢–°–Ø —Ä–∞–∑–æ–º
‚Ä¢ –í—ã –ø–æ–ª—É—á–∞–µ—Ç–µ –æ—Ç—á–µ—Ç –æ–± —É–¥–∞–ª–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏—è—Ö

<b>–ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞:</b>
‚Ä¢ üí¨ –î–∏–∞–ª–æ–≥–∏ –≤–∏–¥–Ω—ã –≤–æ –≤—Ä–µ–º—è –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
‚Ä¢ üóëÔ∏è –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –æ—á–∏—Å—Ç–∫–∞ –≤ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –≤—Ä–µ–º—è
‚Ä¢ üìä –û—Ç—á–µ—Ç –æ –ø—Ä–æ–¥–µ–ª–∞–Ω–Ω–æ–π —Ä–∞–±–æ—Ç–µ

<b>–ö–æ–º–∞–Ω–¥—ã –≤ –≥—Ä—É–ø–ø–µ:</b>
/id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞  
/test_night - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º
/force_cleanup - –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞ (–∞–¥–º–∏–Ω—ã)

<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∞:</b>
1. –î–æ–±–∞–≤—å—Ç–µ –±–æ—Ç–∞ –≤ –≥—Ä—É–ø–ø—É –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
2. –î–∞–π—Ç–µ –ø—Ä–∞–≤–∞ –Ω–∞ —É–¥–∞–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è —á–µ—Ä–µ–∑ –ª–∏—á–Ω—ã–π —á–∞—Ç —Å –±–æ—Ç–æ–º
"""
        buttons = ["üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]
        keyboard = self.create_keyboard(buttons)
        self.send_message(chat_id, text, keyboard)

    def show_group_help(self, chat_id):
        """–ü–æ–º–æ—â—å –≤ –≥—Ä—É–ø–ø–µ"""
        text = f"""
ü§ñ <b>–ë–æ—Ç –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞</b>

<b>–ö–æ–º–∞–Ω–¥—ã:</b>
/id - –ü–æ–ª—É—á–∏—Ç—å ID —á–∞—Ç–∞
/status - –°—Ç–∞—Ç—É—Å —Ä–µ–∂–∏–º–∞  
/test_night - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º

<b>ID —ç—Ç–æ–≥–æ —á–∞—Ç–∞:</b> <code>{chat_id}</code>

<b>–î–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:</b>
1. –ù–∞–ø–∏—à–∏—Ç–µ –±–æ—Ç—É –≤ –ª–∏—á–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
2. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ ID –≤—ã—à–µ
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –≤—Ä–µ–º—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
"""
        self.send_message(chat_id, text)

    def show_group_status(self, chat_id):
        """–°—Ç–∞—Ç—É—Å –≤ –≥—Ä—É–ø–ø–µ"""
        settings = self.get_chat_settings(chat_id)
        
        if settings and len(settings) > 2 and settings[2]:
            is_night_mode_active = settings[9] if len(settings) > 9 else 0
            if is_night_mode_active:
                current_session = self.get_current_session(chat_id)
                self.cursor.execute('SELECT COUNT(*) FROM saved_messages WHERE chat_id = ? AND night_mode_session = ?', 
                                  (chat_id, current_session))
                saved_count = self.cursor.fetchone()[0]
                
                status = "üî¥ –ê–ö–¢–ò–í–ï–ù (—Å–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è)"
                end_time = settings[4] if len(settings) > 4 else "05:00"
                info = f"üíæ –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {saved_count} —Å–æ–æ–±—â–µ–Ω–∏–π\n‚è∞ –£–¥–∞–ª–µ–Ω–∏–µ –≤: {end_time}"
            else:
                status = "üü¢ –í–ö–õ–Æ–ß–ï–ù (–æ–∂–∏–¥–∞–Ω–∏–µ)"
                start_time = settings[3] if len(settings) > 3 else "23:00"
                info = f"‚è∞ –ù–∞—á–Ω–µ—Ç—Å—è –≤: {start_time}"
        else:
            status = "üî¥ –í–´–ö–õ–Æ–ß–ï–ù"
            info = "–†–µ–∂–∏–º –æ—Ç–∫–ª—é—á–µ–Ω"
        
        text = f"""
üìä <b>–°—Ç–∞—Ç—É—Å –Ω–æ—á–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞</b>

üåô –†–µ–∂–∏–º: {status}
{info}
üÜî ID: <code>{chat_id}</code>

üí° –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ —É–¥–∞–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞
"""
        self.send_message(chat_id, text)

    # ==== –ë–ê–ó–ê –î–ê–ù–ù–´–• –ú–ï–¢–û–î–´ ====

    def get_chat_settings(self, chat_id):
        """–ü–æ–ª—É—á–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ —á–∞—Ç–∞"""
        self.cursor.execute('SELECT * FROM chat_settings WHERE chat_id = ?', (chat_id,))
        return self.cursor.fetchone()

    def enable_night_mode(self, chat_id):
        """–í–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º"""
        try:
            self.cursor.execute('UPDATE chat_settings SET night_mode_enabled = 1 WHERE chat_id = ?', (chat_id,))
            self.conn.commit()
            self.logger.info(f"‚úÖ –†–µ–∂–∏–º –≤–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def disable_night_mode(self, chat_id):
        """–í—ã–∫–ª—é—á–∏—Ç—å –Ω–æ—á–Ω–æ–π —Ä–µ–∂–∏–º"""
        try:
            self.cursor.execute('UPDATE chat_settings SET night_mode_enabled = 0 WHERE chat_id = ?', (chat_id,))
            self.conn.commit()
            self.logger.info(f"‚úÖ –†–µ–∂–∏–º –≤—ã–∫–ª—é—á–µ–Ω –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–∫–ª—é—á–µ–Ω–∏—è: {e}")

    def update_start_time(self, chat_id, start_time):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞"""
        try:
            self.cursor.execute('UPDATE chat_settings SET start_time = ? WHERE chat_id = ?', (start_time, chat_id))
            self.conn.commit()
            self.logger.info(f"‚úÖ –í—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {start_time} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def update_end_time(self, chat_id, end_time):
        """–û–±–Ω–æ–≤–∏—Ç—å –≤—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è"""
        try:
            self.cursor.execute('UPDATE chat_settings SET end_time = ? WHERE chat_id = ?', (end_time, chat_id))
            self.conn.commit()
            self.logger.info(f"‚úÖ –í—Ä–µ–º—è –æ–∫–æ–Ω—á–∞–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {end_time} –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏: {e}")

    def update_welcome_message(self, chat_id, message):
        """–û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
        try:
            self.cursor.execute('UPDATE chat_settings SET welcome_message = ? WHERE chat_id = ?', (message, chat_id))
            self.conn.commit()
            self.logger.info(f"‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ –¥–ª—è —á–∞—Ç–∞ {chat_id}")
        except Exception as e:
            self.logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

    def is_valid_time(self, time_str):
        """–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –≤–∞–ª–∏–¥–Ω–æ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–∏"""
        try:
            datetime.strptime(time_str, "%H:%M")
            return True
        except ValueError:
            return False

def main():
    BOT_TOKEN = "8416503414:AAHmAD0tstjerCS4itAEwZ7s9WYcH2JF-xM"
    
    bot = NightModeBot(BOT_TOKEN)
    
    print("üöÄ –ë–æ—Ç-–º–æ–¥–µ—Ä–∞—Ç–æ—Ä –∑–∞–ø—É—â–µ–Ω!")
    print("üíæ –†–µ–∂–∏–º –æ—Ç–ª–æ–∂–µ–Ω–Ω–æ–≥–æ —É–¥–∞–ª–µ–Ω–∏—è –∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω")
    print("‚è∞ –°–æ–æ–±—â–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω—è—é—Ç—Å—è –∏ —É–¥–∞–ª—è—é—Ç—Å—è –≤ –∫–æ–Ω—Ü–µ –ø–µ—Ä–∏–æ–¥–∞")
    print("üì± –ù–∞–ø–∏—à–∏—Ç–µ /start –≤ Telegram")
    print("‚èπÔ∏è Ctrl+C –¥–ª—è –æ—Å—Ç–∞–Ω–æ–≤–∫–∏")
    
    last_update_id = 0
    
    try:
        while True:
            try:
                url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
                params = {"offset": last_update_id + 1, "timeout": 25}
                
                response = requests.get(url, params=params, timeout=30)
                
                if response.status_code == 200:
                    data = response.json()
                    if data.get("ok") and data.get("result"):
                        for update in data["result"]:
                            last_update_id = update["update_id"]
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π (–≤—Å–µ—Ö —Ç–∏–ø–æ–≤)
                            if "message" in update:
                                message = update["message"]
                                user_id = message["from"]["id"]
                                chat_id = message["chat"]["id"]
                                
                                bot.handle_message(message, user_id, chat_id)
                            
                            # –û–±—Ä–∞–±–æ—Ç–∫–∞ callback –æ—Ç –∏–Ω–ª–∞–π–Ω –∫–Ω–æ–ø–æ–∫
                            elif "callback_query" in update:
                                callback = update["callback_query"]
                                callback_data = callback.get("data", "")
                                user_id = callback["from"]["id"]
                                chat_id = callback["message"]["chat"]["id"]
                                message_id = callback["message"]["message_id"]
                                
                                bot.handle_callback(callback_data, user_id, chat_id, message_id)
                
                time.sleep(0.5)
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                time.sleep(5)
                
    except KeyboardInterrupt:
        print("\nüõë –ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")

if __name__ == "__main__":
    main()
